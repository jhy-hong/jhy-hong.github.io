<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>宏渊的技术博客</title><link>https://jhy-hong.github.io</link><description>我是宏渊，一个热爱技术，热爱分享的，热爱生活的牛马。。。</description><copyright>宏渊的技术博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/59826062?v=4</url><title>avatar</title><link>https://jhy-hong.github.io</link></image><lastBuildDate>Wed, 04 Jun 2025 16:19:03 +0000</lastBuildDate><managingEditor>宏渊的技术博客</managingEditor><ttl>60</ttl><webMaster>宏渊的技术博客</webMaster><item><title>go语言中的测试</title><link>https://jhy-hong.github.io/post/go-yu-yan-zhong-de-ce-shi.html</link><description># golang中的测试

golang中使用go test进行相应测试，目前有三种：

- 单元测试：对软件中**最小可测试单元进行检查和验证**，比如对一个函数的测试

- 性能测试：也称为基准测试，可测试&lt;mark&gt;一段程序的性能，可以得到时间消耗，内存使用情况&lt;/mark&gt;的报告

- 示例测试：用于展示某个包或某个方法的用法

### 单元测试

目录结构

&lt;img width='205' alt='Image' src='https://github.com/user-attachments/assets/eb5fa6e6-eb15-4f64-83a7-1268bb5b558a' /&gt;

源代码文件unit.go：

```go
package unitTesting

func Add(a, b int) int {
    return a + b
}
```

测试文件 unit_testing.go

```go
package unitTesting_test

import (
    'testing'
    'unitTesting'
)

func TestAdd(t *testing.T) {
    var a, b = 1, 2
    expected := 3
    actual := unitTesting.Add(a, b)
    if actual != expected {
        t.Errorf('error')
    }
}
```

测试文件属于unitTesting_test包，测试文件也可以和源文件在同一个包中，但常见的做法是创建一个包专门用于测试，这样&lt;mark&gt;可以使测试文件和源文件隔离&lt;/mark&gt;，规则是在原包名加上 &lt;mark&gt;_test&lt;/mark&gt;

**小结：**

- 测试文件名必须以&lt;mark&gt;_test.go&lt;/mark&gt;结尾

- 测试函数名必须以&lt;mark&gt;TestXxx&lt;/mark&gt;开始

- 在命令行下使用&lt;mark&gt;go test&lt;/mark&gt;即可开启测试

## 基准测试

*目录结构*

![Image](https://github.com/user-attachments/assets/168950e5-21e7-44d5-a653-7e89249df538)

源代码文件 benchmakr.go

```go
package benchmarkTest

// MakeSliceWithoutAlloc 不预分配
func MakeSliceWithoutAlloc() []int {
    var newSlice []int
    for i := 0; i &lt; 100000; i++ {
        newSlice = append(newSlice, i)
    }
    return newSlice
}

// MakeSliceWithAlloc 预分配
func MakeSliceWithAlloc() []int {
    var newSlice []int
    newSlice = make([]int, 0, 100000)
    for i := 0; i &lt; 100000; i++ {
        newSlice = append(newSlice, i)
    }
    return newSlice
}
```

测试文件benchmark_test.go

```go
package benchmarkTest_test

import (
    'benchmarkTest'
    'testing'
)

func BenchmarkMakeSliceWithoutAlloc(b *testing.B) {
    for i := 0; i &lt; b.N; i++ {
        benchmarkTest.MakeSliceWithoutAlloc()
    }
}
func BenchmarkMakeSliceWithAlloc(b *testing.B) {
    for i := 0; i &lt; b.N; i++ {
        benchmarkTest.MakeSliceWithAlloc()
    }
}
```

性能测试函数的命名规则为BenchmarkXxx，其中Xxx为自定义的标识，需要以大写字母开头，通常为待测函数

testing.B提供了一系列用于辅助性能测试的方法或成员，如上面的b.N表示循环执行的次数，而N值不用程序员关心，N值是动态调整的，直到可靠的算出程序执行时间后才会停止。</description><guid isPermaLink="true">https://jhy-hong.github.io/post/go-yu-yan-zhong-de-ce-shi.html</guid><pubDate>Wed, 04 Jun 2025 16:18:36 +0000</pubDate></item><item><title>第二章 mysql的全维度优化总结</title><link>https://jhy-hong.github.io/post/di-er-zhang-%20mysql-de-quan-wei-du-you-hua-zong-jie.html</link><description>## 一、数据库设计阶段优化

### 1. 规范化设计（前期）

- 合理使用范式（第一/第二/第三范式），减少数据冗余。</description><guid isPermaLink="true">https://jhy-hong.github.io/post/di-er-zhang-%20mysql-de-quan-wei-du-you-hua-zong-jie.html</guid><pubDate>Wed, 04 Jun 2025 08:04:35 +0000</pubDate></item><item><title>第一章 mysql相关优化（索引维度）</title><link>https://jhy-hong.github.io/post/di-yi-zhang-%20mysql-xiang-guan-you-hua-%EF%BC%88-suo-yin-wei-du-%EF%BC%89.html</link><description>## mysql相关优化（索引维度）

### 建表测试

先设计几张表，用户表 `users`，商品表 `products`，订单表 `orders`,订单明细表 `order_items`

用户表 `users`

```sql
CREATE TABLE users (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '用户ID',
    username VARCHAR(64) NOT NULL UNIQUE COMMENT '用户名',
    email VARCHAR(128) NOT NULL COMMENT '邮箱',
    phone VARCHAR(20) DEFAULT NULL COMMENT '手机号',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT '注册时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;


```

商品表 `products`

```sql
CREATE TABLE products (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '商品ID',
    name VARCHAR(128) NOT NULL COMMENT '商品名称',
    category VARCHAR(64) DEFAULT NULL COMMENT '分类',
    price DECIMAL(10, 2) NOT NULL COMMENT '价格',
    stock INT NOT NULL DEFAULT 0 COMMENT '库存',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT '上架时间',
    INDEX idx_category_price (category, price)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;


```

订单表 `orders`

```sql
CREATE TABLE orders (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '订单ID',
    user_id BIGINT NOT NULL COMMENT '下单用户ID',
    order_no VARCHAR(64) NOT NULL UNIQUE COMMENT '订单号',
    status TINYINT NOT NULL DEFAULT 0 COMMENT '订单状态 0-待支付 1-已支付 2-已发货 3-完成',
    total_amount DECIMAL(10,2) NOT NULL COMMENT '订单总额',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT '下单时间',
    INDEX idx_user_created (user_id, created_at),
    FOREIGN KEY (user_id) REFERENCES users(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

```

订单明细表 `order_items`

```sql
CREATE TABLE order_items (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '明细ID',
    order_id BIGINT NOT NULL COMMENT '订单ID',
    product_id BIGINT NOT NULL COMMENT '商品ID',
    quantity INT NOT NULL COMMENT '购买数量',
    price DECIMAL(10,2) NOT NULL COMMENT '单价',
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id),
    INDEX idx_order_product (order_id, product_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
```

### 生成大量数据以供测试

生成测试的数据，可以使用sql脚本，python脚本等

批量生成 `users` 数据（10 万条）

```sql
START TRANSACTION;

INSERT INTO users (username, email, phone, created_at)
SELECT
  CONCAT('user_', LPAD(id, 6, '0')),
  CONCAT('user_', LPAD(id, 6, '0'), '@example.com'),
  CONCAT('13', LPAD(FLOOR(RAND()*100000000), 8, '0')),
  NOW() - INTERVAL FLOOR(RAND()*365) DAY
FROM (
  SELECT @rownum := @rownum + 1 AS id
  FROM information_schema.COLUMNS a, information_schema.COLUMNS b, (SELECT @rownum := 0) r
  LIMIT 100000
) AS temp;

COMMIT;

```

批量生成 `products` 数据（1000 条）

```sql
START TRANSACTION;

INSERT INTO products (name, category, price, stock, created_at)
SELECT
  CONCAT('商品_', LPAD(id, 4, '0')),
  ELT(FLOOR(1 + (RAND() * 5)), '数码', '图书', '服饰', '家居', '食品'),
  ROUND(50 + RAND() * 950, 2),
  FLOOR(100 + RAND() * 900),
  NOW() - INTERVAL FLOOR(RAND()*180) DAY
FROM (
  SELECT @pid := @pid + 1 AS id
  FROM information_schema.COLUMNS a, (SELECT @pid := 0) r
  LIMIT 1000
) AS temp;

COMMIT;

```

批量生成 `orders` 数据（每用户 1~3 个订单）

```sql
-- 模拟循环插入
DELIMITER $$

CREATE PROCEDURE generate_orders()
BEGIN
  DECLARE i INT DEFAULT 0;
  WHILE i &lt; 200000 DO
    INSERT INTO orders (user_id, order_no, status, total_amount, created_at)
    SELECT
      FLOOR(1 + RAND() * 100000),
      CONCAT('ORD_', LPAD(FLOOR(RAND() * 10000000), 7, '0')),
      FLOOR(RAND() * 4),
      ROUND(50 + RAND() * 1000, 2),
      NOW() - INTERVAL FLOOR(RAND() * 60) DAY;
    SET i = i + 1;
  END WHILE;
END$$

DELIMITER ;

CALL generate_orders();

```

批量生成 `order_items` 数据（每订单 1~3 个商品）

```sql
START TRANSACTION;

INSERT INTO order_items (order_id, product_id, quantity, price)
SELECT
  FLOOR(1 + (RAND() * 200000)), -- 订单 ID 范围
  FLOOR(1 + (RAND() * 1000)),   -- 商品 ID 范围
  FLOOR(1 + RAND()*5),
  ROUND(50 + RAND()*950, 2)
FROM (
  SELECT @oiid := @oiid + 1 AS id
  FROM information_schema.COLUMNS a, information_schema.COLUMNS b, (SELECT @oiid := 0) r
  LIMIT 500000
) AS temp;

COMMIT;

```

## 开始测试相关优化项

我们尝试执行一下

```sql
EXPLAIN SELECT * FROM users WHERE phone = '1302706965';
```

发现其执行计划如下：

![Image](https://github.com/user-attachments/assets/260cd39e-cf04-44d9-99b0-ea111a5f0533)

###  `EXPLAIN` 字段详细解释

| 字段名            | 含义                                             | 优化建议                               |
| ----------------- | ------------------------------------------------ | -------------------------------------- |
| **id**            | 查询中语句块的标识编号。</description><guid isPermaLink="true">https://jhy-hong.github.io/post/di-yi-zhang-%20mysql-xiang-guan-you-hua-%EF%BC%88-suo-yin-wei-du-%EF%BC%89.html</guid><pubDate>Tue, 03 Jun 2025 13:57:37 +0000</pubDate></item><item><title>第六章 go并发原语之Once</title><link>https://jhy-hong.github.io/post/di-liu-zhang-%20go-bing-fa-yuan-yu-zhi-Once.html</link><description>`sync.Once` 是 Go 标准库 `sync` 包中的一个非常实用的并发原语，用于确保某个操作只会被执行一次，无论有多少个 goroutine 同时调用。</description><guid isPermaLink="true">https://jhy-hong.github.io/post/di-liu-zhang-%20go-bing-fa-yuan-yu-zhi-Once.html</guid><pubDate>Mon, 02 Jun 2025 14:03:32 +0000</pubDate></item><item><title>第五章 go并发原语之WaitGroup</title><link>https://jhy-hong.github.io/post/di-wu-zhang-%20go-bing-fa-yuan-yu-zhi-WaitGroup.html</link><description>`WaitGroup`很简单，就是`sync` 用来做任务编排的一个并发原语。</description><guid isPermaLink="true">https://jhy-hong.github.io/post/di-wu-zhang-%20go-bing-fa-yuan-yu-zhi-WaitGroup.html</guid><pubDate>Sun, 01 Jun 2025 09:50:18 +0000</pubDate></item><item><title>第四章 go并发原语之sync.Map</title><link>https://jhy-hong.github.io/post/di-si-zhang-%20go-bing-fa-yuan-yu-zhi-sync.Map.html</link><description>## map的基本使用方法

1. **声明与初始化**

```go
// 声明一个未初始化的map（nil）
var m1 map[string]int

// 使用make初始化
m2 := make(map[string]int) // 空map
m3 := make(map[string]int, 10) // 指定初始容量

// 字面量初始化
m4 := map[string]int{
    'apple':  5,
    'banana': 3,
}
```

2. **操作键值对**

```go
// 添加/修改
m := make(map[string]int)
m['apple'] = 10

// 获取值
value := m['apple']   // 10
v, exists := m['pear'] // v=0, exists=false

// 删除键
delete(m, 'apple')
```

3. **遍历map**

```go
for key, value := range m {
    fmt.Println(key, value) // 顺序随机
}
```

4. **获取长度**

```go
n := len(m) // 键值对数量
```

------

### **注意事项**

1. **未初始化map为nil**

- nil map无法写入：对`nil`map赋值会导致`panic`

  ```go
  var m map[string]int
  m['key'] = 1 // panic: assignment to nil map
  ```

- **解决方案**：用`make`或字面量初始化。</description><guid isPermaLink="true">https://jhy-hong.github.io/post/di-si-zhang-%20go-bing-fa-yuan-yu-zhi-sync.Map.html</guid><pubDate>Fri, 30 May 2025 14:13:45 +0000</pubDate></item><item><title>第三章 go并发原语之RWMutex</title><link>https://jhy-hong.github.io/post/di-san-zhang-%20go-bing-fa-yuan-yu-zhi-RWMutex.html</link><description>之前学习过Mutex，互斥锁，它可以保证读写安全的互斥性，无论是读还是写，Mutex都能保证**只有一个**goroutine访问共享资源，但这在某些情况下比较浪费资源，比如读多写少的情况下。</description><guid isPermaLink="true">https://jhy-hong.github.io/post/di-san-zhang-%20go-bing-fa-yuan-yu-zhi-RWMutex.html</guid><pubDate>Thu, 29 May 2025 18:04:31 +0000</pubDate></item><item><title>第二章 go并发原语之mutex原理及易错场景</title><link>https://jhy-hong.github.io/post/di-er-zhang-%20go-bing-fa-yuan-yu-zhi-mutex-yuan-li-ji-yi-cuo-chang-jing.html</link><description>mutex互斥锁经历过很多版本，我们只讨论最新的版本。</description><guid isPermaLink="true">https://jhy-hong.github.io/post/di-er-zhang-%20go-bing-fa-yuan-yu-zhi-mutex-yuan-li-ji-yi-cuo-chang-jing.html</guid><pubDate>Thu, 29 May 2025 18:02:40 +0000</pubDate></item><item><title>第一章 go并发原语之mutex的概念</title><link>https://jhy-hong.github.io/post/di-yi-zhang-%20go-bing-fa-yuan-yu-zhi-mutex-de-gai-nian.html</link><description># 为什么需要互斥锁？
1. 防止数据竞争​：当多个goroutine并发访问共享资源时，可能导致数据不一致或逻辑错误。</description><guid isPermaLink="true">https://jhy-hong.github.io/post/di-yi-zhang-%20go-bing-fa-yuan-yu-zhi-mutex-de-gai-nian.html</guid><pubDate>Thu, 29 May 2025 17:45:19 +0000</pubDate></item></channel></rss>