<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>宏渊的技术博客</title><link>https://jhy-hong.github.io</link><description>我是宏渊，一个热爱技术，热爱分享的，热爱生活的牛马。。。</description><copyright>宏渊的技术博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/59826062?v=4</url><title>avatar</title><link>https://jhy-hong.github.io</link></image><lastBuildDate>Fri, 30 May 2025 14:15:17 +0000</lastBuildDate><managingEditor>宏渊的技术博客</managingEditor><ttl>60</ttl><webMaster>宏渊的技术博客</webMaster><item><title>第三章 go并发原语之sync.Map</title><link>https://jhy-hong.github.io/post/di-san-zhang-%20go-bing-fa-yuan-yu-zhi-sync.Map.html</link><description>## map的基本使用方法

1. **声明与初始化**

```go
// 声明一个未初始化的map（nil）
var m1 map[string]int

// 使用make初始化
m2 := make(map[string]int) // 空map
m3 := make(map[string]int, 10) // 指定初始容量

// 字面量初始化
m4 := map[string]int{
    'apple':  5,
    'banana': 3,
}
```

2. **操作键值对**

```go
// 添加/修改
m := make(map[string]int)
m['apple'] = 10

// 获取值
value := m['apple']   // 10
v, exists := m['pear'] // v=0, exists=false

// 删除键
delete(m, 'apple')
```

3. **遍历map**

```go
for key, value := range m {
    fmt.Println(key, value) // 顺序随机
}
```

4. **获取长度**

```go
n := len(m) // 键值对数量
```

------

### **注意事项**

1. **未初始化map为nil**

- nil map无法写入：对`nil`map赋值会导致`panic`

  ```go
  var m map[string]int
  m['key'] = 1 // panic: assignment to nil map
  ```

- **解决方案**：用`make`或字面量初始化。</description><guid isPermaLink="true">https://jhy-hong.github.io/post/di-san-zhang-%20go-bing-fa-yuan-yu-zhi-sync.Map.html</guid><pubDate>Fri, 30 May 2025 14:13:45 +0000</pubDate></item><item><title>第三章 go并发原语之RWMutex</title><link>https://jhy-hong.github.io/post/di-san-zhang-%20go-bing-fa-yuan-yu-zhi-RWMutex.html</link><description>之前学习过Mutex，互斥锁，它可以保证读写安全的互斥性，无论是读还是写，Mutex都能保证**只有一个**goroutine访问共享资源，但这在某些情况下比较浪费资源，比如读多写少的情况下。</description><guid isPermaLink="true">https://jhy-hong.github.io/post/di-san-zhang-%20go-bing-fa-yuan-yu-zhi-RWMutex.html</guid><pubDate>Thu, 29 May 2025 18:04:31 +0000</pubDate></item><item><title>第二章 go并发原语之mutex原理及易错场景</title><link>https://jhy-hong.github.io/post/di-er-zhang-%20go-bing-fa-yuan-yu-zhi-mutex-yuan-li-ji-yi-cuo-chang-jing.html</link><description>mutex互斥锁经历过很多版本，我们只讨论最新的版本。</description><guid isPermaLink="true">https://jhy-hong.github.io/post/di-er-zhang-%20go-bing-fa-yuan-yu-zhi-mutex-yuan-li-ji-yi-cuo-chang-jing.html</guid><pubDate>Thu, 29 May 2025 18:02:40 +0000</pubDate></item><item><title>第一章 go并发原语之mutex的概念</title><link>https://jhy-hong.github.io/post/di-yi-zhang-%20go-bing-fa-yuan-yu-zhi-mutex-de-gai-nian.html</link><description># 为什么需要互斥锁？
1. 防止数据竞争​：当多个goroutine并发访问共享资源时，可能导致数据不一致或逻辑错误。</description><guid isPermaLink="true">https://jhy-hong.github.io/post/di-yi-zhang-%20go-bing-fa-yuan-yu-zhi-mutex-de-gai-nian.html</guid><pubDate>Thu, 29 May 2025 17:45:19 +0000</pubDate></item></channel></rss>